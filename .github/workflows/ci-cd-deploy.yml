name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - dev
  pull_request:
    branches:
      - main
      - staging
      - dev

env:
  IMAGE_REGISTRY: ghcr.io/kehe0014/springboot-microservices-helm
  SERVICES: api-gateway user-service product-service
  STAGING_ENV: staging
  PROD_ENV: prod

jobs:
  lint-helm:
    name: Lint Helm Charts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.3

      - name: Lint all Helm charts
        run: |
          for chart in helm-charts/charts/*; do
            echo "Linting $chart"
            helm lint "$chart"
          done

  test-services:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, user-service, product-service]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Run Tests
        run: ./gradlew test
        working-directory: services/${{ matrix.service }}

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint-helm, test-services]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        run: |
          IMAGE_TAG=$(git rev-parse --short=7 HEAD)
          for svc in $SERVICES; do
            IMAGE="$IMAGE_REGISTRY/$svc:$IMAGE_TAG"
            docker build -t $IMAGE ./services/$svc
            docker push $IMAGE
            echo "$svc image pushed: $IMAGE"
          done

  scan-docker:
    name: Scan Docker Images with Trivy
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Trivy
        uses: aquasecurity/trivy-action@v2
        with:
          version: '0.44.0'

      - name: Scan all Docker images
        run: |
          IMAGE_TAG=$(git rev-parse --short=7 HEAD)
          for svc in $SERVICES; do
            IMAGE="$IMAGE_REGISTRY/$svc:$IMAGE_TAG"
            echo "Scanning $IMAGE..."
            trivy image --exit-code 1 --severity HIGH,CRITICAL "$IMAGE"
          done

  update-values-staging:
    name: Update Helm Values Staging
    runs-on: ubuntu-latest
    needs: scan-docker
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Update values.yaml for staging
        run: |
          IMAGE_TAG=$(git rev-parse --short=7 HEAD)
          for svc in $SERVICES; do
            yq eval ".image.tag = \"$IMAGE_TAG\"" -i helm-charts/environments/staging/${svc}-values.yaml
          done

      - name: Commit updated values
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add helm-charts/environments/staging/*.yaml
          git commit -m "Update Helm values for staging [ci skip]" || echo "No changes"
          git push origin HEAD

  update-values-prod:
    name: Update Helm Values Prod
    runs-on: ubuntu-latest
    needs: scan-docker
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Update values.yaml for prod
        run: |
          IMAGE_TAG=$(git rev-parse --short=7 HEAD)
          for svc in $SERVICES; do
            yq eval ".image.tag = \"$IMAGE_TAG\"" -i helm-charts/environments/prod/${svc}-values.yaml
          done

      - name: Commit updated values
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add helm-charts/environments/prod/*.yaml
          git commit -m "Update Helm values for prod [ci skip]" || echo "No changes"
          git push origin HEAD
